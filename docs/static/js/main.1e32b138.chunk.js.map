{"version":3,"sources":["js/Section.js","js/SectionList.js","js/App.js","serviceWorker.js","index.js"],"names":["markdownFiles","markdownContext","keys","map","filename","console","log","Section","props","_this","Object","classCallCheck","this","name","possibleConstructorReturn","getPrototypeOf","call","state","fileURL","thumbnailURL","text","that","assertThisInitialized","forEach","file","includes","sectionID","_this2","fetch","then","result","setState","_this3","react_default","a","createElement","className","src","alt","react_markdown_default","source","skipHtml","disallowedTypes","unwrapDisallowed","onClick","untitled","show","lib_default","dialogStyles","backgroundColor","color","width","height","marginTop","marginLeft","top","left","closeButtonStyle","hideOnOverlayClicked","ref","escapeHtml","transformImageUri","input","imageContext","React","Component","SectionList","sectionItems","docList","section","js_Section","key","title","toString","App","js_SectionList","Boolean","window","location","hostname","match","mdViewer","document","querySelector","ReactDOM","render","js_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAuBA,IAAMA,QAZFC,GAaCC,OACAC,IAAI,SAACC,GAAD,YAdLH,GAcmCG,KACvCC,QAAQC,IAAIN,OAwFGO,cAlFX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfF,QAAQC,IAAI,WAAaE,EAAMK,OAE/BJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAH,GAAAS,KAAAJ,KAAMJ,KAEDS,MAAQ,CACTC,QAAS,GACTC,aAAc,GACdC,KAAM,IAaV,IAAIC,EAAIX,OAAAY,EAAA,EAAAZ,CAAAD,GArBO,OAsBfT,EAAcuB,QAAQ,SAASC,GACxBA,EAAKC,SAASjB,EAAMkB,aACnBL,EAAKJ,MAAMC,QAAUM,KAxBdf,mFA6BA,IAAAkB,EAAAf,KAEfP,QAAQC,IAAIM,KAAKK,MAAMC,SACvBU,MAAMhB,KAAKK,MAAMC,SACZW,KAAK,SAAAC,GAAM,OAAIA,EAAOV,SACtBS,KAAK,SAAAC,GAAM,OAAIH,EAAKI,SAAS,CAACX,KAAMU,uCAGrC,IAAAE,EAAApB,KAoBJ,OACIqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,IAAKzB,KAAKK,MAAME,aAAcmB,IAAK1B,KAAKJ,MAAMW,eACzEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACIE,UAAU,wBACVI,OAAQ5B,KAAKK,MAAMG,KACnBqB,UAAU,EACVC,gBAAiB,CAAC,QAAS,kBAC3BC,kBAAkB,IAEtBV,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMZ,EAAKa,SAASC,SAArC,gBACAb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAUc,aA9BJ,CACdC,gBAAiB,qBACjBC,MAAO,UACPC,MAAO,MACPC,OAAQ,MACRC,UAAW,KACXC,WAAY,OACZC,IAAK,KACLC,KAAM,KACNC,iBAAkB,CACdP,MAAO,UAoBkCQ,sBAAoB,EAACC,IAAK,SAAAA,GAAG,OAAI3B,EAAKa,SAAWc,IAClF1B,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAeE,UAAU,qBACrBI,OAAQ5B,KAAKK,MAAMG,KACnBwC,YAAY,EACZC,kBApBL,SAASC,GACpB,YA7ERC,GA6E4BD,gBAvDVE,IAAMC,eCCbC,mLAnBP,IAAMC,QARVC,GAQiCjE,IAAI,SAACkE,GAAD,OAC7BpC,EAAAC,EAAAC,cAACmC,EAAD,CACIC,IAAKF,EAAQG,MAAMC,WACnB5D,KAAMwD,EAAQG,MACdrD,aAAckD,EAAQlD,aACtBO,UAAW2C,EAAQ3C,cAI3B,OAEIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAKgC,WAfKH,IAAMC,WCEjBS,mLANP,OACIzC,EAAAC,EAAAC,cAACwC,EAAD,aAHMX,IAAMC,WCQJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAIC,EAAWC,SAASC,cAAc,aAEtCC,IAASC,OACLpD,EAAAC,EAAAC,cAACmD,EAAD,CAAKL,SAAUA,IACfC,SAASK,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.1e32b138.chunk.js","sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport SkyLight from 'react-skylight';\n\n// CSS files\nimport '../css/Section.css';\nimport '../res/github-markdown.css';\n\n// get location of images folder in webpack\nvar imageContext;\n// also get location of the markdown text files to use\nvar markdownContext;\n\nif(process.env.NODE_ENV === 'development') {\n    imageContext    = require.context('../images', true);\n    markdownContext = require.context('../res/markdown_docs/', false, /\\.md$/);// grab uri of each markdown file in here\n}\n// else {\n//     imageContext    = require.context('./images', true);\n//     markdownContext = require.context('./markdown_docs/', false, /\\.md$/);// grab uri of each markdown file in here\n// }\n\n\nconst markdownFiles = markdownContext\n    .keys()\n    .map((filename) => markdownContext(filename));\nconsole.log(markdownFiles);\n\n// -------------------------------------------------------------\n\n//  -----------------------------------------------------------\nclass Section extends React.Component {\n    constructor(props) {\n        console.log(\"Section \" + props.name);\n        // props are still accessible through super constructor\n        super(props);\n        // default set state for derived variables\n        this.state = {\n            fileURL: '',\n            thumbnailURL: '',\n            text: ''\n        }\n\n        // generate thumbnail\n        if(process.env.NODE_ENV === 'development') {\n            if(props.thumbnailURL !== '')\n                this.state.thumbnailURL = imageContext('./thumbnails/' + props.thumbnailURL);\n            else\n                this.state.thumbnailURL = imageContext('./thumbnails/moon2.png');\n        }\n\n        // generate section text blurb\n        // first, find the url of the matching section\n        var that = this;\n        markdownFiles.forEach(function(file) {\n            if(file.includes(props.sectionID))\n                that.state.fileURL = file;\n        });\n    }\n\n    // reactjs.org says that this function is a good place to load remote data, say from your github server\n    componentDidMount(){\n        // load that file\n        console.log(this.state.fileURL);\n        fetch(this.state.fileURL)\n            .then(result => result.text())\n            .then(result => this.setState({text: result}));\n    }\n\n    render(){\n        // style\n        var dialogStyle = {\n            backgroundColor: 'rgb(245, 245, 245)',\n            color: '#ffffff',\n            width: '90%',\n            height: '90%',\n            marginTop: '2%',\n            marginLeft: '4.5%',\n            top: '0%',\n            left: '0%',\n            closeButtonStyle: {\n                color: 'black'\n            }\n        };\n        // URI for image assets transformation in the markdown\n        const getURI = function(input){\n            return imageContext(input);\n        };\n\n        return (\n            <div className=\"section\">\n                <img className=\"thumbnail\" src={this.state.thumbnailURL} alt={this.props.thumbnailURL}></img>\n                <div className=\"details\">\n                    <ReactMarkdown\n                        className=\"markdown-body summary\"\n                        source={this.state.text}\n                        skipHtml={true}\n                        disallowedTypes={['image', 'imageReference']}\n                        unwrapDisallowed={true}\n                    />\n                    <button onClick={() => this.untitled.show()}>Read more...</button>\n                    <SkyLight dialogStyles={dialogStyle} hideOnOverlayClicked ref={ref => this.untitled = ref}>\n                        <ReactMarkdown className=\"markdown-body full\"\n                            source={this.state.text}\n                            escapeHtml={false}\n                            transformImageUri={getURI}\n                        />\n                    </SkyLight>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Section;\n","import React from 'react';\nimport '../css/SectionList.css';\nimport Section from './Section';\n\n// list of static generative art pages defined in res/sections.json\nvar docList;\nif(process.env.NODE_ENV === 'development') {\n    docList = require('../res/sections.json');\n}\n\nclass SectionList extends React.Component {\n    // section items is a map of Section components with prop data as the section data\n    render() {\n        const sectionItems = docList.map((section) =>\n            <Section\n                key={section.title.toString()}\n                name={section.title}\n                thumbnailURL={section.thumbnailURL}\n                sectionID={section.sectionID}\n                >\n            </Section>\n        );\n        return (\n            // return a list of section items\n            <div className=\"App\">\n                <ul>{sectionItems}</ul>\n            </div>\n            // route to each dynamically loaded generative art page\n        );\n    }\n}\n\nexport default SectionList;\n","import React from 'react';\nimport '../css/App.css';\nimport SectionList from './SectionList';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <SectionList></SectionList>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nlet mdViewer = document.querySelector('#mdViewer');\n\nReactDOM.render(\n    <App mdViewer={mdViewer} />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}